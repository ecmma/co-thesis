* Use of coinduction in the analysis and optimization of an imperative language 

  1. [ ] Introduction 
    - [ ] What is this thesis about
      The union of multiple practical and theoretical techniques: coinduction,
      monads, sized types. Investigate the use of said techniques in the
      definition of the semantics of an imperative programming language. Proofs
      about analysis of programs of said imperative language.
    - [ ] Related work 
      + Danielsson's operational semantics
      + Abel's normalization by evaluation 
      + Bove's partiality and recursion in interactive theorem provers

  2. [ ] Induction and coinduction 
    - [ ] Introduction 
      Structural induction and recursion. 
      Obvious examples. 
      Limits: we may want to reason about infinite structures. 
    - [ ] Infinite datatypes
    - [ ] Infinite proofs 
    - [ ] Relation with fixed points

  3. [ ] Agda
    - [ ] Dependent types
    - [ ] Termination and productivity
    - [ ] Sized types

  4. [ ] The partiality monad
    - [ ] Monads
    - [ ] ~Maybe~, ~Delay~ and ~Thunk~
  
  5. [-] The *Imp* language 
    - [X] Syntax
       Goes in the introduction. Cite the syntactic 
       elements, show the EBNF grammar.
    - [ ] Semantics
      Express using inference rules at this stage. 
    - [ ] Analysis
      + [ ] Definite initialization analysis
	 Introduce the analysis, the Dia relation, variables, indicator
	 functions and how they relate to stores.
      + [ ] Pure constant folding
