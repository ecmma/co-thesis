# First things first: why `lujon`? Henry Mancini.

* TODO Partial /{Codata.Sized.Partial}/
  - [X] monad /{.Effectful}/
    + [X] map *[(A -> B) -> Delay (Maybe A) -> Delay (Maybe B)]*
    + [X] bind *[Delay (Maybe A) -> (A -> Delay (Maybe B) -> Delay (Maybe B)]*
    + [X] functor *[RawFunctor (λ A → Delay (Maybe A))]*
    + [X] monad *[RawMonad (λ A → Delay (Maybe A))]*
  - [-] weak bisimilarity /{.Bisimilarity}/
    + [-] equivalence /{.Relation.Binary.Equivalence}/
      * [X] reflexivity
      * [X] symmetry
      * [ ] transitivity
    + [-] reasoning /{.Reasoning}/
      # Maybe, instead of "plain" functions, I'd be better off using data+constructors for reasoning
      * [X] transitivity by propositional equality *[x ≡ y → Bisim i k y z → Bisim i k x z]*
      * [ ] transitivity by bisimilarity *[(i ⊢ x ≈ y) → (i ⊢ y ≈ z) → (i ⊢ x ≈ z)]*
  - [-] properties {.Relation}
    + [ ] convergence /{.Binary - .Unary}/
      * [ ] prove ≈-⇓⇓, that is for any two `x` and `y` (x≈y) <=> (x⇓ <=> y⇓) 
    + [X] `All` predicate 
      * [X] bind preserves `All`
      * [X] reasoning

* TODO Imp
  - [X] Syntax 
    + [X] Terms 
      * [X] _AExp_
      * [X] _BExp_ 
      * [X] _Command_ 
      * [X] _Ident_ 
      * [X] _VarsSet_
    + [X] Properties
      * [X] Subterm relation (on every term)
      * [X] Identifiers equivalence
      * [X] Extensional equality for _VarsSet_
      * [X] Subterm relation implies /vars/ inclusion (postulated)
  - [-] Semantics
    + [X] Functional 
      - [X] _aeval_
      - [X] _beval_
      - [X] _ceval_
    + [ ] Relational (?)
    + [ ] Prove semantics equivalence (?)
  - [ ] Optimizations 
    + [-] Definite initialization
      * [ ] _ok_, _ivars_ (check Nipkow's Concrete semantics p. 154, ex. 10.1)
      * [X] _DiaRel_
      * [ ] Properties
	- [ ] _DiaRel_ implies _ok_
	- [ ] _ok_ implies _DiaRel_
	- [ ] _dia-safe_ *[DiaRel A c A' → A ⊆ dom s → (ceval c s ⇑) ∨ (ceval c s ⇓)]*
    + [ ] Constant folding and propagation
      * [ ] _fold-table_
	* [ ] Properties
	  * [ ] _afold-correct_ *[t ≈ s -> aval (afold a t) ≡ aval a s]*
	  * [ ] _bfold-correct_ *[t ≈ s -> bval (bfold b t) ≡ bval b s]*
	  + [ ] _cfold-correct_ *[???]* (Nikpow's: fold c empty ∼ c (C.s. p. 159))
