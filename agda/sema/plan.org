* TODO Partial/Bisimilarity
  - [ ] prove transitivity (in Codata.Sized.Partial.Bisimilarity.Relation.Binary.Equivalence)
  - [ ] define x ≈⟨ x≈y ⟩ y≈z, that is reasoning about transitivity of
   bisimilarity instantiated on propositional equality (in
   Codata.Sized.Partial.Bisimilarity.Reasoning)
  - [ ] prove ≈-⇓⇓, that is for any two `x` and `y` (x≈y) <=> (x⇓ <=> y⇓) (in
    Codata.Sized.Partial.Relation.Unary.Convergence )

* TODO Imp
  - [X] syntax
    + [X] arithmetic expressions
    + [X] boolean expressions
    + [X] commands
  - [-] semantics 
    + [X] functional
      * [X] aeval (AExp -> Store -> Maybe Z)
      * [X] beval (BExp -> Store -> Maybe Bool)
      * [x] ceval (Command -> Store -> Delay (Maybe Store))
    + [ ] other forms (non functional) semantics?
      * [ ] reduction?
      * [ ] natural?
      * [ ] transitional?

* TODO Stack
  - [X] syntax
  - [ ] semantics 
    + [ ] relational 
      * [ ] operational (small-step)
      * [ ] ?
    + [ ] functional?

* TODO ImpToStack
  - [-] compiler
    + [x] comp-aexp
    + [x] comp-bool
    + [x] comp-com
    + [ ] correctness
      * [ ] prove comp-aexp-correct 
      * [ ] prove comp-bexp-correct 
      * [ ] prove comp-com-correct 
  - [ ] optimizations
    + [ ] liveness
    + [ ] dead-code elimination
      * [ ] dce (Command -> Command)
      * [ ] prove semantic preservation
    + [ ] register allocation
      * [ ] regalloc (Command -> Command)
      * [ ] prove semantic preservation
