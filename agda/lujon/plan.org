# First things first: why `lujon`? Henry Mancini.

* TODO Partial /{Codata.Sized.Partial}/
  - [X] monad /{.Effectful}/
    + [X] map *[(A -> B) -> Delay (Maybe A) -> Delay (Maybe B)]*
    + [X] bind *[Delay (Maybe A) -> (A -> Delay (Maybe B) -> Delay (Maybe B)]*
    + [X] functor *[RawFunctor (λ A → Delay (Maybe A))]*
    + [X] monad *[RawMonad (λ A → Delay (Maybe A))]*
  - [-] weak bisimilarity /{.Bisimilarity}/
    + [-] equivalence /{.Relation.Binary.Equivalence}/
      * [X] reflexivity
      * [X] symmetry
      * [ ] transitivity
    + [-] reasoning /{.Reasoning}/
      # Maybe, instead of "plain" functions, I'd be better off using data+constructors for reasoning
      * [X] transitivity by propositional equality *[x ≡ y → Bisim i k y z → Bisim i k x z]*
      * [ ] transitivity by bisimilarity *[(i ⊢ x ≈ y) → (i ⊢ y ≈ z) → (i ⊢ x ≈ z)]*
  - [-] properties {.Relation}
    + [ ] convergence /{.Binary - .Unary}/
      * [ ] prove ≈-⇓⇓, that is for any two `x` and `y` (x≈y) <=> (x⇓ <=> y⇓) 
    + [X] `All` predicate 
      * [X] bind preserves `All`
      * [X] reasoning

* TODO Imp
  - [ ] Syntax 
    + [ ] _aexp_ 
    + [ ] _bexp_ 
    + [ ] _com_ 
    + [ ] _ident_ 
  - [ ] Semantics
    + [ ] Functional 
      - [ ] _aeval_
      - [ ] _beval_
      - [ ] _ceval_
    + [ ] Relational
    + [ ] Prove semantics equivalence
  - [ ] Optimizations 
    + [ ] Definite initialization
      * [ ] _dia_
      * [ ] Properties
	- [ ] ?
    + [ ] Constant folding and propagation
      * [ ] _fold_
      * [ ] Properties 
	- [ ] Soundness
 
